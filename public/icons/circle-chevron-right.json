{
	"name": "circle-chevron-right",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": ["forward", "next", "menu", ">", "code", "caret", "expand"],
	"files": [
		{
			"path": "CircleChevronRightIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface CircleChevronRightIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface CircleChevronRightIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst CircleChevronRightIcon = forwardRef<\n\tCircleChevronRightIconHandle,\n\tCircleChevronRightIconProps\n>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst circleControls = useAnimation();\n\t\tconst arrowControls = useAnimation();\n\t\tconst isControlled = useRef(false);\n\t\tconst tickControls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tcircleControls.start(\"normal\");\n\t\t\t\t\t\ttickControls.start(\"normal\");\n\t\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcircleControls.start(\"animate\");\n\t\t\t\t\t\ttickControls.start(\"animate\");\n\t\t\t\t\t\tarrowControls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tcircleControls.start(\"normal\");\n\t\t\t\t\ttickControls.start(\"normal\");\n\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tcircleControls.start(\"animate\");\n\t\t\t\t\ttickControls.start(\"animate\");\n\t\t\t\t\tarrowControls.start(\"animate\");\n\t\t\t\t} else {\n\t\t\t\t\tonMouseEnter?.(e as any);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[circleControls, tickControls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tcircleControls.start(\"normal\");\n\t\t\t\t\ttickControls.start(\"normal\");\n\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t} else {\n\t\t\t\t\tonMouseLeave?.(e as any);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[circleControls, tickControls, onMouseLeave],\n\t\t);\n\n\t\tconst circleVariants: Variants = {\n\t\t\tnormal: { scale: 1, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tscale: [1, 1.08, 0.95, 1],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.8 * speed,\n\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst arrowVariants: Variants = {\n\t\t\tnormal: { x: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tx: [8, 0, 2, 0],\n\t\t\t\topacity: 1,\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.9 * speed,\n\t\t\t\t\tease: \"easeOut\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.circle\n\t\t\t\t\t\tcx=\"12\"\n\t\t\t\t\t\tcy=\"12\"\n\t\t\t\t\t\tr=\"10\"\n\t\t\t\t\t\tanimate={circleControls}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tvariants={circleVariants}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m10 8 4 4-4 4\"\n\t\t\t\t\t\tanimate={arrowControls}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tvariants={arrowVariants}\n\t\t\t\t\t/>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nCircleChevronRightIcon.displayName = \"CircleChevronRightIcon\";\nexport { CircleChevronRightIcon };\n",
			"type": "registry:ui"
		}
	]
}
