{
	"name": "copy",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": ["clone", "duplicate", "multiple", "clipboard", "copy"],
	"files": [
		{
			"path": "CopyIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Transition } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface CopyIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface CopyIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst CopyIcon = forwardRef<CopyIconHandle, CopyIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst controls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () =>\n\t\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t\t\telse onMouseEnter?.(e as any);\n\t\t\t},\n\t\t\t[controls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tcontrols.start(\"normal\");\n\t\t\t\t} else {\n\t\t\t\t\tonMouseLeave?.(e as any);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[controls, onMouseLeave],\n\t\t);\n\t\tconst defaultTransition: Transition = {\n\t\t\ttype: \"spring\",\n\t\t\tstiffness: 160,\n\t\t\tdamping: 17,\n\t\t\tmass: 1,\n\t\t};\n\n\t\tconst boxVariants = {\n\t\t\tnormal: { translateY: 0, translateX: 0, rotate: 0 },\n\t\t\tanimate: { translateY: -3, translateX: -3, rotate: 360 },\n\t\t};\n\n\t\tconst pathVariants = {\n\t\t\tnormal: { x: 0, y: 0 },\n\t\t\tanimate: { x: 3, y: 3 },\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.rect\n\t\t\t\t\t\twidth=\"14\"\n\t\t\t\t\t\theight=\"14\"\n\t\t\t\t\t\tx=\"8\"\n\t\t\t\t\t\ty=\"8\"\n\t\t\t\t\t\trx=\"2\"\n\t\t\t\t\t\try=\"2\"\n\t\t\t\t\t\tvariants={boxVariants}\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t\ttransition={{\n\t\t\t\t\t\t\t...defaultTransition,\n\t\t\t\t\t\t\tduration: 0.7 * speed,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2\"\n\t\t\t\t\t\tvariants={pathVariants}\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t\ttransition={defaultTransition}\n\t\t\t\t\t/>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nCopyIcon.displayName = \"CopyIcon\";\n\nexport { CopyIcon };\n",
			"type": "registry:ui"
		}
	]
}
