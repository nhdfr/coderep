{
	"name": "battery",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": ["power", "charge", "energy", "status", "level"],
	"files": [
		{
			"path": "BatteryIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface BatteryIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface BatteryIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst BatteryIcon = forwardRef<BatteryIconHandle, BatteryIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst svgControls = useAnimation();\n\t\tconst rectControls = useAnimation();\n\t\tconst tipControls = useAnimation();\n\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tsvgControls.start(\"normal\");\n\t\t\t\t\t\trectControls.start(\"normal\");\n\t\t\t\t\t\ttipControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsvgControls.start(\"warning\");\n\t\t\t\t\t\trectControls.start(\"warning\");\n\t\t\t\t\t\ttipControls.start(\"warning\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tsvgControls.start(\"normal\");\n\t\t\t\t\trectControls.start(\"normal\");\n\t\t\t\t\ttipControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tsvgControls.start(\"warning\");\n\t\t\t\t\trectControls.start(\"warning\");\n\t\t\t\t\ttipControls.start(\"warning\");\n\t\t\t\t} else {\n\t\t\t\t\tonMouseEnter?.(e as any);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[svgControls, rectControls, tipControls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tsvgControls.start(\"normal\");\n\t\t\t\t\trectControls.start(\"normal\");\n\t\t\t\t\ttipControls.start(\"normal\");\n\t\t\t\t} else {\n\t\t\t\t\tonMouseLeave?.(e as any);\n\t\t\t\t}\n\t\t\t},\n\t\t\t[svgControls, rectControls, tipControls, onMouseLeave],\n\t\t);\n\n\t\tconst svgVariants: Variants = {\n\t\t\tnormal: { rotate: 0, scale: 1 },\n\t\t\twarning: {\n\t\t\t\trotate: [0, -4, 4, -2, 0],\n\t\t\t\tscale: [1, 1.1, 0.95, 1.05, 1],\n\t\t\t\ttransition: { duration: 0.8 * speed, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst rectVariants: Variants = {\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\n\t\t\twarning: {\n\t\t\t\tpathLength: [1, 0.6, 1],\n\t\t\t\topacity: [1, 0.7, 1],\n\t\t\t\ttransition: { duration: 1 * speed, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst tipVariants: Variants = {\n\t\t\tnormal: { y: 0, opacity: 1 },\n\t\t\twarning: {\n\t\t\t\ty: [0, -2, 2, -1, 0],\n\t\t\t\topacity: [1, 0.6, 1],\n\t\t\t\ttransition: { duration: 0.7 * speed, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\tanimate={svgControls}\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\tvariants={svgVariants}\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M22 14L22 10\"\n\t\t\t\t\t\tanimate={tipControls}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tvariants={tipVariants}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.rect\n\t\t\t\t\t\tx=\"2\"\n\t\t\t\t\t\ty=\"6\"\n\t\t\t\t\t\twidth=\"16\"\n\t\t\t\t\t\theight=\"12\"\n\t\t\t\t\t\trx=\"2\"\n\t\t\t\t\t\tanimate={rectControls}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tvariants={rectVariants}\n\t\t\t\t\t/>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nBatteryIcon.displayName = \"BatteryIcon\";\nexport { BatteryIcon };\n",
			"type": "registry:ui"
		}
	]
}
