{
	"name": "external-link",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"outwards",
		"direction",
		"north-east",
		"diagonal",
		"share",
		"open",
		"external",
		"link",
		"outbound",
		"open",
		"share"
	],
	"files": [
		{
			"path": "ExternalLinkIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface ExternalLinkIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface ExternalLinkIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst ExternalLinkIcon = forwardRef<\n\tExternalLinkIconHandle,\n\tExternalLinkIconProps\n>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst boxControls = useAnimation();\n\t\tconst arrowControls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tboxControls.start(\"normal\");\n\t\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tboxControls.start(\"animate\");\n\t\t\t\t\t\tarrowControls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tboxControls.start(\"normal\");\n\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tboxControls.start(\"animate\");\n\t\t\t\t\tarrowControls.start(\"animate\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[boxControls, arrowControls],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tboxControls.start(\"normal\");\n\t\t\t\t\tarrowControls.start(\"normal\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[boxControls, arrowControls],\n\t\t);\n\n\t\tconst boxVariants: Variants = {\n\t\t\tnormal: { pathLength: 1, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tpathLength: [0, 1],\n\t\t\t\topacity: [0.6, 1],\n\t\t\t\ttransition: { duration: 0.8 * speed, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst arrowVariants: Variants = {\n\t\t\tnormal: { x: 0, y: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tx: [0, 3, 0],\n\t\t\t\ty: [0, -3, 0],\n\t\t\t\topacity: [1, 1, 1],\n\t\t\t\ttransition: { duration: 0.6 * speed, ease: \"easeInOut\" },\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M15 3h6v6\"\n\t\t\t\t\t\tvariants={arrowVariants}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={arrowControls}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M10 14 21 3\"\n\t\t\t\t\t\tvariants={arrowVariants}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={arrowControls}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6\"\n\t\t\t\t\t\tvariants={boxVariants}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={boxControls}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nExternalLinkIcon.displayName = \"ExternalLinkIcon\";\nexport { ExternalLinkIcon };\n",
			"type": "registry:ui"
		}
	]
}
