{
	"name": "flame",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"heat",
		"burn",
		"light",
		"glow",
		"ignite",
		"passion",
		"ember",
		"fire",
		"lit",
		"burning",
		"spark",
		"embers",
		"smoke",
		"firefighter",
		"fireman",
		"department",
		"brigade",
		"station",
		"emergency"
	],
	"files": [
		{
			"path": "FlameIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface FlameIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface FlameIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst FlameIcon = forwardRef<FlameIconHandle, FlameIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst pathControls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tpathControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpathControls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tpathControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tpathControls.start(\"animate\");\n\t\t\t\t} else onMouseEnter?.(e as any);\n\t\t\t},\n\t\t\t[pathControls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tpathControls.start(\"normal\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[pathControls, onMouseLeave],\n\t\t);\n\n\t\tconst pathVariants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, scale: 1, y: 0 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [520, 150],\n\t\t\t\tscale: [1, 1.02, 1],\n\t\t\t\ty: [0, -3, 0],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 1.2 * speed,\n\t\t\t\t\tease: [0.22, 0.85, 0.28, 1],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M12 3q1 4 4 6.5t3 5.5a1 1 0 0 1-14 0 5 5 0 0 1 1-3 1 1 0 0 0 5 0c0-2-1.5-3-1.5-5q0-2 2.5-4\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={pathControls}\n\t\t\t\t\t\tvariants={pathVariants}\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tstrokeDasharray: 220,\n\t\t\t\t\t\t\ttransformOrigin: \"12px 12px\",\n\t\t\t\t\t\t\tstrokeLinecap: \"round\",\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nFlameIcon.displayName = \"FlameIcon\";\nexport { FlameIcon };\n",
			"type": "registry:ui"
		}
	]
}
