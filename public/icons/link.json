{
	"name": "link",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"chain",
		"url",
		"hyperlink",
		"connection",
		"attachment",
		"reference",
		"linked",
		"website",
		"linking"
	],
	"files": [
		{
			"path": "LinkIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface LinkIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface LinkIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst LinkIcon = forwardRef<LinkIconHandle, LinkIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst leftPartControls = useAnimation();\n\t\tconst rightPartControls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tleftPartControls.start(\"normal\");\n\t\t\t\t\t\trightPartControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tleftPartControls.start(\"animate\");\n\t\t\t\t\t\trightPartControls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tleftPartControls.start(\"normal\");\n\t\t\t\t\trightPartControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tleftPartControls.start(\"animate\");\n\t\t\t\t\trightPartControls.start(\"animate\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[leftPartControls, rightPartControls],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tleftPartControls.start(\"normal\");\n\t\t\t\t\trightPartControls.start(\"normal\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[leftPartControls, rightPartControls],\n\t\t);\n\n\t\tconst linkVariantsLeft: Variants = {\n\t\t\tnormal: { scale: 1, rotate: 0, x: 0 },\n\t\t\tanimate: {\n\t\t\t\tx: [0, -2, 0],\n\t\t\t\trotate: [0, -3, 0],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.9 * speed,\n\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst linkVariantsRight: Variants = {\n\t\t\tnormal: { scale: 1, rotate: 0, x: 0 },\n\t\t\tanimate: {\n\t\t\t\tx: [0, 2, 0],\n\t\t\t\trotate: [0, 3, 0],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.9 * speed,\n\t\t\t\t\tease: \"easeInOut\",\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71\"\n\t\t\t\t\t\tvariants={linkVariantsRight}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={rightPartControls}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71\"\n\t\t\t\t\t\tvariants={linkVariantsLeft}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={leftPartControls}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nLinkIcon.displayName = \"LinkIcon\";\nexport { LinkIcon };\n",
			"type": "registry:ui"
		}
	]
}
