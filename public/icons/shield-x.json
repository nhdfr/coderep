{
	"name": "shield-x",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"unshielded",
		"cybersecurity",
		"insecure",
		"unsecured",
		"safety",
		"unsafe",
		"protection",
		"unprotected",
		"guardian",
		"unguarded",
		"unarmored",
		"unarmoured",
		"defenseless",
		"defenceless",
		"undefended",
		"defender",
		"blocked",
		"stopped",
		"intercepted",
		"interception",
		"saved",
		"thwarted",
		"threat",
		"prevention",
		"prevented",
		"antivirus",
		"vigilance",
		"vigilant",
		"detection",
		"detected",
		"scanned",
		"found",
		"exploit",
		"vulnerability",
		"vulnerable",
		"weakness",
		"infection",
		"infected",
		"comprimised",
		"data leak",
		"audited",
		"admin",
		"verification",
		"unverified",
		"inactive",
		"cancel",
		"error",
		"wrong",
		"false",
		"crest",
		"bravery",
		"attacked",
		"damaged",
		"injured",
		"hit",
		"dead",
		"deceased",
		"expired",
		"eliminated",
		"exterminated"
	],
	"files": [
		{
			"path": "ShieldXIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface ShieldXIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface ShieldXIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst ShieldXIcon = forwardRef<ShieldXIconHandle, ShieldXIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst shieldControls = useAnimation();\n\t\tconst x1Controls = useAnimation();\n\t\tconst x2Controls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tshieldControls.start(\"normal\");\n\t\t\t\t\t\tx1Controls.start(\"normal\");\n\t\t\t\t\t\tx2Controls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshieldControls.start(\"animate\");\n\t\t\t\t\t\tx1Controls.start(\"animate\");\n\t\t\t\t\t\tx2Controls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tshieldControls.start(\"normal\");\n\t\t\t\t\tx1Controls.start(\"normal\");\n\t\t\t\t\tx2Controls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tshieldControls.start(\"animate\");\n\t\t\t\t\tx1Controls.start(\"animate\");\n\t\t\t\t\tx2Controls.start(\"animate\");\n\t\t\t\t} else onMouseEnter?.(e as any);\n\t\t\t},\n\t\t\t[shieldControls, x1Controls, x2Controls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tshieldControls.start(\"normal\");\n\t\t\t\t\tx1Controls.start(\"normal\");\n\t\t\t\t\tx2Controls.start(\"normal\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[shieldControls, x1Controls, x2Controls, onMouseLeave],\n\t\t);\n\n\t\tconst shieldVariants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, scale: 1, rotate: 0 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [300, 24, 0],\n\t\t\t\tscale: [1, 0.98, 1.04, 1],\n\t\t\t\trotate: [0, -2, 1, 0],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 1.0 * speed,\n\t\t\t\t\tease: [0.18, 0.85, 0.25, 1],\n\t\t\t\t\ttimes: [0, 0.35, 0.75, 1],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst x1Variants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [40, 0],\n\t\t\t\topacity: [0, 1],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.5 * speed,\n\t\t\t\t\tease: [0.22, 0.9, 0.28, 1],\n\t\t\t\t\tdelay: 0.28,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst x2Variants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [40, 0],\n\t\t\t\topacity: [0, 1],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.5 * speed,\n\t\t\t\t\tease: [0.22, 0.9, 0.28, 1],\n\t\t\t\t\tdelay: 0.36,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M20 13c0 5-3.5 7.5-7.66 8.95a1 1 0 0 1-.67-.01C7.5 20.5 4 18 4 13V6a1 1 0 0 1 1-1c2 0 4.5-1.2 6.24-2.72a1.17 1.17 0 0 1 1.52 0C14.51 3.81 17 5 19 5a1 1 0 0 1 1 1z\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={shieldControls}\n\t\t\t\t\t\tvariants={shieldVariants}\n\t\t\t\t\t\tstyle={{ strokeDasharray: 300, transformOrigin: \"12px 12px\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m14.5 9.5-5 5\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={x1Controls}\n\t\t\t\t\t\tvariants={x1Variants}\n\t\t\t\t\t\tstyle={{ strokeDasharray: 40, strokeLinecap: \"round\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"m9.5 9.5 5 5\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={x2Controls}\n\t\t\t\t\t\tvariants={x2Variants}\n\t\t\t\t\t\tstyle={{ strokeDasharray: 40, strokeLinecap: \"round\" }}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nShieldXIcon.displayName = \"ShieldXIcon\";\nexport { ShieldXIcon };\n",
			"type": "registry:ui"
		}
	]
}
