{
	"name": "headset",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"music",
		"audio",
		"sound",
		"gaming",
		"headphones",
		"headset",
		"call",
		"center",
		"phone",
		"telephone",
		"voip",
		"video"
	],
	"files": [
		{
			"path": "HeadsetIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface HeadsetIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface HeadsetIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst HeadsetIcon = forwardRef<HeadsetIconHandle, HeadsetIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst frameControls = useAnimation();\n\t\tconst tailControls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () => {\n\t\t\t\t\tif (reduced) {\n\t\t\t\t\t\tframeControls.start(\"normal\");\n\t\t\t\t\t\ttailControls.start(\"normal\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tframeControls.start(\"animate\");\n\t\t\t\t\t\ttailControls.start(\"animate\");\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tstopAnimation: () => {\n\t\t\t\t\tframeControls.start(\"normal\");\n\t\t\t\t\ttailControls.start(\"normal\");\n\t\t\t\t},\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tframeControls.start(\"animate\");\n\t\t\t\t\ttailControls.start(\"animate\");\n\t\t\t\t} else onMouseEnter?.(e as any);\n\t\t\t},\n\t\t\t[frameControls, tailControls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) {\n\t\t\t\t\tframeControls.start(\"normal\");\n\t\t\t\t\ttailControls.start(\"normal\");\n\t\t\t\t} else onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[frameControls, tailControls, onMouseLeave],\n\t\t);\n\n\t\tconst frameVariants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, scale: 1, rotate: 0 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [240, 40, 0],\n\t\t\t\tscale: [1, 0.96, 1.06, 1],\n\t\t\t\trotate: [0, -2, 1, 0],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.95 * speed,\n\t\t\t\t\tease: [0.2, 0.85, 0.25, 1],\n\t\t\t\t\ttimes: [0, 0.35, 0.75, 1],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\tconst tailVariants: Variants = {\n\t\t\tnormal: { strokeDashoffset: 0, x: 0, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tstrokeDashoffset: [100, 20, 0],\n\t\t\t\tx: [10, -4, 0],\n\t\t\t\topacity: [0, 1, 1],\n\t\t\t\ttransition: {\n\t\t\t\t\tduration: 0.7 * speed,\n\t\t\t\t\tease: [0.22, 0.9, 0.28, 1],\n\t\t\t\t\tdelay: 0.18,\n\t\t\t\t\ttimes: [0, 0.5, 1],\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M3 11h3a2 2 0 0 1 2 2v3a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-5Zm0 0a9 9 0 1 1 18 0m0 0v5a2 2 0 0 1-2 2h-1a2 2 0 0 1-2-2v-3a2 2 0 0 1 2-2h3Z\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={frameControls}\n\t\t\t\t\t\tvariants={frameVariants}\n\t\t\t\t\t\tstyle={{ strokeDasharray: 240, transformOrigin: \"12px 12px\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M21 16v2a4 4 0 0 1-4 4h-5\"\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={tailControls}\n\t\t\t\t\t\tvariants={tailVariants}\n\t\t\t\t\t\tstyle={{ strokeDasharray: 100, strokeLinecap: \"round\" }}\n\t\t\t\t\t/>\n\t\t\t\t</svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nHeadsetIcon.displayName = \"HeadsetIcon\";\nexport { HeadsetIcon };\n",
			"type": "registry:ui"
		}
	]
}
