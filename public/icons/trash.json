{
	"name": "trash",
	"type": "registry:ui",
	"registryDependencies": [],
	"dependencies": ["motion"],
	"devDependencies": [],
	"tailwind": {},
	"cssVars": {
		"light": {},
		"dark": {}
	},
	"keywords": [
		"empty",
		"deletion",
		"cleanup",
		"junk",
		"clear",
		"garbage",
		"delete",
		"remove",
		"bin",
		"waste",
		"discard"
	],
	"files": [
		{
			"path": "TrashIcon.tsx",
			"content": "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport type { HTMLMotionProps, Variants } from \"motion/react\";\nimport { motion, useAnimation, useReducedMotion } from \"motion/react\";\nimport { forwardRef, useCallback, useImperativeHandle, useRef } from \"react\";\n\nexport interface DashboardIconHandle {\n\tstartAnimation: () => void;\n\tstopAnimation: () => void;\n}\n\ninterface DashboardIconProps extends HTMLMotionProps<\"div\"> {\n\tsize?: number;\n\tspeed?: number;\n}\n\nconst TrashIcon = forwardRef<DashboardIconHandle, DashboardIconProps>(\n\t(\n\t\t{ onMouseEnter, onMouseLeave, className, size = 28, speed = 1, ...props },\n\t\tref,\n\t) => {\n\t\tconst controls = useAnimation();\n\t\tconst reduced = useReducedMotion();\n\t\tconst isControlled = useRef(false);\n\n\t\tuseImperativeHandle(ref, () => {\n\t\t\tisControlled.current = true;\n\t\t\treturn {\n\t\t\t\tstartAnimation: () =>\n\t\t\t\t\treduced ? controls.start(\"normal\") : controls.start(\"animate\"),\n\t\t\t\tstopAnimation: () => controls.start(\"normal\"),\n\t\t\t};\n\t\t});\n\n\t\tconst handleEnter = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (reduced) return;\n\t\t\t\tif (!isControlled.current) controls.start(\"animate\");\n\t\t\t\telse onMouseEnter?.(e as any);\n\t\t\t},\n\t\t\t[controls, reduced, onMouseEnter],\n\t\t);\n\n\t\tconst handleLeave = useCallback(\n\t\t\t(e?: React.MouseEvent<HTMLDivElement>) => {\n\t\t\t\tif (!isControlled.current) controls.start(\"normal\");\n\t\t\t\telse onMouseLeave?.(e as any);\n\t\t\t},\n\t\t\t[controls, onMouseLeave],\n\t\t);\n\n\t\tconst iconVariants: Variants = {\n\t\t\tnormal: { scale: 1, rotate: 0 },\n\t\t\tanimate: {\n\t\t\t\tscale: [1, 1.03, 1],\n\n\t\t\t\ttransition: { duration: 0.5 * speed, ease: \"easeOut\" },\n\t\t\t},\n\t\t};\n\n\t\tconst lidBounce: Variants = {\n\t\t\tnormal: { y: 0, rotate: 0, transformOrigin: \"12px 6px\" },\n\t\t\tanimate: {\n\t\t\t\trotate: [0, -10, 6, -3, 0],\n\t\t\t\ty: [0, -2, 0.5, 0],\n\t\t\t\ttransition: { duration: 0.9 * speed, ease: \"easeInOut\", delay: 0.05 },\n\t\t\t},\n\t\t};\n\n\t\tconst barSnap: Variants = {\n\t\t\tnormal: { scaleX: 1, opacity: 1 },\n\t\t\tanimate: {\n\t\t\t\tscaleX: [0.85, 1.08, 1],\n\t\t\t\topacity: [0.9, 1, 1],\n\t\t\t\ttransition: { duration: 0.45 * speed, ease: \"easeOut\", delay: 0.1 },\n\t\t\t},\n\t\t};\n\n\t\tconst binSettle: Variants = {\n\t\t\tnormal: { y: 0, scaleY: 1, transformOrigin: \"50% 100%\" },\n\t\t\tanimate: {\n\t\t\t\tscaleY: [1, 0.97, 1],\n\t\t\t\ttransition: { duration: 0.5 * speed, ease: \"easeOut\", delay: 0.2 },\n\t\t\t},\n\t\t};\n\n\t\treturn (\n\t\t\t<motion.div\n\t\t\t\tclassName={cn(\"inline-flex items-center justify-center\", className)}\n\t\t\t\tonMouseEnter={handleEnter}\n\t\t\t\tonMouseLeave={handleLeave}\n\t\t\t\t{...props}\n\t\t\t>\n\t\t\t\t<motion.svg\n\t\t\t\t\txmlns=\"http://www.w3.org/2000/svg\"\n\t\t\t\t\twidth={size}\n\t\t\t\t\theight={size}\n\t\t\t\t\tviewBox=\"0 0 24 24\"\n\t\t\t\t\tfill=\"none\"\n\t\t\t\t\tstroke=\"currentColor\"\n\t\t\t\t\tstrokeWidth=\"2\"\n\t\t\t\t\tstrokeLinecap=\"round\"\n\t\t\t\t\tstrokeLinejoin=\"round\"\n\t\t\t\t\tanimate={controls}\n\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\tvariants={iconVariants}\n\t\t\t\t>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6\"\n\t\t\t\t\t\tvariants={binSettle}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M3 6h18\"\n\t\t\t\t\t\tvariants={barSnap}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t/>\n\t\t\t\t\t<motion.path\n\t\t\t\t\t\td=\"M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\"\n\t\t\t\t\t\tvariants={lidBounce}\n\t\t\t\t\t\tinitial=\"normal\"\n\t\t\t\t\t\tanimate={controls}\n\t\t\t\t\t/>\n\t\t\t\t</motion.svg>\n\t\t\t</motion.div>\n\t\t);\n\t},\n);\n\nTrashIcon.displayName = \"TrashIcon\";\nexport { TrashIcon };\n",
			"type": "registry:ui"
		}
	]
}
